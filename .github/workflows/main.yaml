name: CI/CD Pipeline for .NET App

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }} # Sua região
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }} # Nome do seu repo no ECR
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }} # Nome do seu cluster

jobs:
  #---------------------------------------------
  # Job 1: Build, Teste e Publicação da Imagem Docker
  #---------------------------------------------
  build-and-push:
    name: Build, Test and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore ../../src/Tech.Challenge

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --no-restore --verbosity normal

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #---------------------------------------------
  # Job 2: Provisionamento da Infraestrutura com Terraform
  #---------------------------------------------
#   deploy-infra:
#     name: Deploy Infrastructure with Terraform
#     runs-on: ubuntu-latest
#     needs: build-and-push # Não precisa depender, pode rodar em paralelo

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3

#     - name: Terraform Init
#       run: terraform -chdir=infra init

#     - name: Terraform Plan
#       run: terraform -chdir=infra plan

#     - name: Terraform Apply
#       run: terraform -chdir=infra apply -auto-approve

  #---------------------------------------------
  # Job 3: Deploy da Aplicação no Kubernetes
  #---------------------------------------------
#   deploy-app:
#     name: Deploy to EKS
#     runs-on: ubuntu-latest
#     needs: [build-and-push, deploy-infra] # Depende do sucesso dos dois anteriores

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Configure Kubectl
#       run: |
#         aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

#     - name: Create or Update DB Secret
#       run: |
#         # Obtenha o endpoint do RDS (idealmente via Terraform output ou AWS CLI)
#         # Obtenha o usuário e senha do RDS (idealmente do AWS Secrets Manager)
#         kubectl create secret generic db-credentials \
#           --from-literal=username='${{ secrets.DB_USER }}' \
#           --from-literal=password='${{ secrets.DB_PASSWORD }}' \
#           --from-literal=host='endpoint-do-seu-rds' \
#           -o yaml --dry-run=client | kubectl apply -f -

#     - name: Deploy to Kubernetes
#       run: |
#         # Substitui o placeholder da imagem no deployment.yaml com a imagem real
#         sed -i 's|DOCKER_IMAGE_PLACEHOLDER|${{ needs.build-and-push.outputs.image }}|g' k8s/deployment.yaml
        
#         # Aplica todos os manifestos
#         kubectl apply -f k8s/