apiVersion: apps/v1
kind: Deployment
metadata:
  name: techchallenge-deployment
spec:
  replicas: 1 # Para produção, considere aumentar para 2 ou mais para alta disponibilidade
  selector:
    matchLabels:
      app: techchallenge
  template:
    metadata:
      labels:
        app: techchallenge
    spec:
      terminationGracePeriodSeconds: 5
      containers:
        - name: techchallenge-container
          # A pipeline substituirá este placeholder pela imagem correta do ECR
          image: tech-challenge/tech-challenge:latest

          # --- ALTERAÇÃO CRÍTICA ---
          # 'Always' garante que a imagem mais recente seja sempre baixada do ECR.
          imagePullPolicy: Never

          # --- BOA PRÁTICA: RECURSOS ---
          # Ajuste estes valores com base no perfil de uso da sua aplicação.
          resources:
            requests:
              cpu: "250m"      # 0.25 core garantido por pod
              memory: "200Mi"  # 200 MiB garantido
            limits:
              cpu: "400m"      # limite máximo 0.4 core
              memory: "300Mi"  # limite máximo 300 MiB

          ports:
            # Garanta que este 'containerPort' seja a mesma porta que sua aplicação .NET escuta.
            - containerPort: 5000

          # --- BOA PRÁTICA: HEALTH CHECKS ---
          # Crie estes endpoints (/health, /health/ready) na sua API .NET.
          # livenessProbe:
          #   httpGet:
          #     path: /health # Rota que indica se a aplicação está funcional
          #     port: 5000
          #   initialDelaySeconds: 15 # Espera 15s antes de começar a checar
          #   periodSeconds: 20       # Checa a cada 20s

          envFrom:
            - configMapRef:
                name: techchallenge-config
            - secretRef:
                # O nome deste segredo deve ser o mesmo que você cria na pipeline do GitHub Actions.
                name: techchallenge-secret