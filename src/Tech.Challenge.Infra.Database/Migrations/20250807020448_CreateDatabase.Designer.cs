// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tech.Challenge.Infra.Database.Contexts;

#nullable disable

namespace Tech.Challenge.Infra.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250807020448_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Cliente.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AdicionadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AtuazadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.OrdemServico.OrdemServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadaEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClienteCpf")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CriadaEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EntregueEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Orcamento")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("OrdemServicos");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Produto.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("numeric");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.ProdutoOS.ProdutoOS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrdemServicoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrdemServicoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutosOrdemServico");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Servico.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PrecoServico")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.ServicoOS.ServicoOS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrdemServicoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PrecoServico")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ServicoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrdemServicoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ServicosOrdemServico");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Veiculo.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AdicionadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Ano")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.OrdemServico.OrdemServico", b =>
                {
                    b.HasOne("Tech.Challenge.Domain.Entities.Cliente.Cliente", "Cliente")
                        .WithMany("OrdemServicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.ProdutoOS.ProdutoOS", b =>
                {
                    b.HasOne("Tech.Challenge.Domain.Entities.OrdemServico.OrdemServico", "OrdemServico")
                        .WithMany("Produtos")
                        .HasForeignKey("OrdemServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tech.Challenge.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutosOrdemServico")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdemServico");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.ServicoOS.ServicoOS", b =>
                {
                    b.HasOne("Tech.Challenge.Domain.Entities.OrdemServico.OrdemServico", "OrdemServico")
                        .WithMany("Servicos")
                        .HasForeignKey("OrdemServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tech.Challenge.Domain.Entities.Servico.Servico", "Servico")
                        .WithMany("ServicosOrdemServico")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdemServico");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Veiculo.Veiculo", b =>
                {
                    b.HasOne("Tech.Challenge.Domain.Entities.Cliente.Cliente", "Cliente")
                        .WithMany("Veiculos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Cliente.Cliente", b =>
                {
                    b.Navigation("OrdemServicos");

                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.OrdemServico.OrdemServico", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Produto.Produto", b =>
                {
                    b.Navigation("ProdutosOrdemServico");
                });

            modelBuilder.Entity("Tech.Challenge.Domain.Entities.Servico.Servico", b =>
                {
                    b.Navigation("ServicosOrdemServico");
                });
#pragma warning restore 612, 618
        }
    }
}
